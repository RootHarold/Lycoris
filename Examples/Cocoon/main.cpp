/*
    Copyright (c) 2018, RootHarold
    All rights reserved.

    Use of this source code is governed by an Apache license that can be found
    in the LICENSE file.
*/

#include <iostream>
#include "lycoris.h"

using namespace LycorisNet;

float poetry[331] = {0.523438, 0.867188, 0.773438, 0.867188, 0.867188, 0.859375, 0.25, 0.757812, 0.765625,
                     0.867188, 0.921875, 0.789062, 0.257812, 0.25, 0.523438, 0.867188, 0.773438, 0.867188,
                     0.867188, 0.859375, 0.25, 0.765625, 0.789062, 0.84375, 0.867188, 0.929688, 0.257812,
                     0.078125, 0.648438, 0.90625, 0.789062, 0.757812, 0.84375, 0.90625, 0.8125, 0.945312, 0.25,
                     0.523438, 0.867188, 0.773438, 0.867188, 0.867188, 0.859375, 0.34375, 0.25, 0.929688, 0.8125,
                     0.945312, 0.25, 0.8125, 0.820312, 0.78125, 0.789062, 0.25, 0.945312, 0.867188, 0.914062,
                     0.25, 0.898438, 0.867188, 0.078125, 0.679688, 0.8125, 0.757812, 0.90625, 0.25, 0.757812,
                     0.84375, 0.84375, 0.25, 0.90625, 0.8125, 0.789062, 0.25, 0.929688, 0.867188, 0.890625,
                     0.84375, 0.78125, 0.25, 0.898438, 0.914062, 0.898438, 0.875, 0.789062, 0.773438, 0.90625,
                     0.492188, 0.078125, 0.507812, 0.859375, 0.25, 0.8125, 0.867188, 0.914062, 0.890625, 0.34375,
                     0.25, 0.757812, 0.859375, 0.78125, 0.25, 0.804688, 0.757812, 0.945312, 0.25, 0.867188,
                     0.859375, 0.25, 0.789062, 0.921875, 0.789062, 0.890625, 0.945312, 0.25, 0.90625, 0.890625,
                     0.789062, 0.789062, 0.078125, 0.695312, 0.867188, 0.914062, 0.890625, 0.25, 0.898438,
                     0.789062, 0.773438, 0.890625, 0.789062, 0.90625, 0.34375, 0.25, 0.875, 0.789062, 0.890625,
                     0.773438, 0.8125, 0.789062, 0.78125, 0.25, 0.820312, 0.859375, 0.25, 0.789062, 0.773438,
                     0.898438, 0.90625, 0.757812, 0.898438, 0.945312, 0.078125, 0.53125, 0.789062, 0.796875,
                     0.820312, 0.789062, 0.898438, 0.25, 0.820312, 0.851562, 0.875, 0.890625, 0.820312, 0.898438,
                     0.867188, 0.859375, 0.851562, 0.789062, 0.859375, 0.90625, 0.257812, 0.078125, 0.078125,
                     0.507812, 0.859375, 0.25, 0.8125, 0.867188, 0.914062, 0.890625, 0.25, 0.820312, 0.859375,
                     0.25, 0.523438, 0.8125, 0.890625, 0.945312, 0.898438, 0.757812, 0.84375, 0.820312, 0.898438,
                     0.25, 0.90625, 0.867188, 0.25, 0.875, 0.757812, 0.898438, 0.898438, 0.34375, 0.078125,
                     0.65625, 0.8125, 0.789062, 0.859375, 0.25, 0.804688, 0.757812, 0.945312, 0.25, 0.757812,
                     0.765625, 0.867188, 0.921875, 0.789062, 0.25, 0.890625, 0.789062, 0.773438, 0.789062,
                     0.78125, 0.820312, 0.859375, 0.804688, 0.25, 0.804688, 0.890625, 0.757812, 0.898438,
                     0.898438, 0.078125, 0.507812, 0.25, 0.515625, 0.914062, 0.90625, 0.90625, 0.789062, 0.890625,
                     0.796875, 0.84375, 0.945312, 0.25, 0.90625, 0.867188, 0.25, 0.804688, 0.867188, 0.257812,
                     0.078125, 0.507812, 0.25, 0.851562, 0.867188, 0.851562, 0.789062, 0.859375, 0.90625, 0.25,
                     0.90625, 0.867188, 0.25, 0.820312, 0.859375, 0.90625, 0.789062, 0.890625, 0.890625, 0.867188,
                     0.804688, 0.757812, 0.90625, 0.789062, 0.34375, 0.078125, 0.65625, 0.8125, 0.789062,
                     0.859375, 0.25, 0.929688, 0.820312, 0.898438, 0.789062, 0.890625, 0.25, 0.90625, 0.8125,
                     0.757812, 0.859375, 0.25, 0.757812, 0.25, 0.265625, 0.648438, 0.914062, 0.890625, 0.890625,
                     0.867188, 0.804688, 0.757812, 0.90625, 0.789062, 0.34375, 0.265625, 0.078125, 0.65625,
                     0.8125, 0.789062, 0.25, 0.664062, 0.859375, 0.820312, 0.921875, 0.789062, 0.890625, 0.898438,
                     0.789062, 0.25, 0.90625, 0.867188, 0.25, 0.835938, 0.859375, 0.867188, 0.929688, 0.257812,
                     0};

void func(Individual &in) {
    float input[2] = {0, 1};
    float output[331];
    in.forward(input, output);
    in.fitness = 0 - LycorisUtils::euclidean_distance(output, poetry, 331);
}

int main() {
    std::cout << "Powered by: " << LycorisUtils::version() << std::endl;
    auto lie = new Lycoris(480, 2, 331);
    lie->setForwardFunc(func);
    lie->openMemLimit(2048);
    for (int i = 0; i < 10000; ++i) {
        lie->runLycoris();
        std::cout << "Epoch " << (i + 1) << " : " << lie->best->fitness << std::endl;
    }
    //lie->runLycoris(1000);
    float input[2] = {0, 1};
    float output[331];
    lie->best->forward(input, output);
    char ret[331];
    for (int i = 0; i < 331; ++i) {
        float temp = output[i] < 0 ? 0 : temp = output[i];
        ret[i] = char(int(roundf(temp * 128)));
    }
    std::cout << std::string(ret) << std::endl;
    lie->exportLycoris("poetry.model");
    delete lie;
    return 0;
}
